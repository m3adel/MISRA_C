
LED sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000e20  00000eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006a  0080006a  00000ebe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c93  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb4  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001257  00000000  00000000  00003973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00004bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097b  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d5  00000000  00000000  00005a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_1>
   8:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_2>
   c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	bf 00       	.word	0x00bf	; ????
  5a:	d0 00       	.word	0x00d0	; ????
  5c:	e1 00       	.word	0x00e1	; ????
  5e:	f2 00       	.word	0x00f2	; ????
  60:	03 01       	movw	r0, r6
  62:	14 01       	movw	r2, r8

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 e2       	ldi	r30, 0x20	; 32
  78:	fe e0       	ldi	r31, 0x0E	; 14
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	aa e6       	ldi	r26, 0x6A	; 106
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a4 38       	cpi	r26, 0x84	; 132
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  9a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <EX_INT0_ISR>:
u8 blink_state = 0;
u16 blink_states[5] = {10,20,30,50,80};

static void EX_INT0_ISR (void)
{
	if ((state_number < number_of_states) == true)
  a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <state_number>
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	20 f4       	brcc	.+8      	; 0xb2 <EX_INT0_ISR+0x10>
	{
		state_number++;
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <state_number>
  b0:	08 95       	ret
		
	}
	else
	{
		state_number =0;
  b2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <state_number>
  b6:	08 95       	ret

000000b8 <EX_INT1_ISR>:

}

static void EX_INT1_ISR (void)
{
	if ((state_number < number_of_blink_states) == true)
  b8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <state_number>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	30 f4       	brcc	.+12     	; 0xcc <EX_INT1_ISR+0x14>
	{
		blink_state++;		
  c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  ca:	08 95       	ret
	}
	else
	{
		blink_state =0;
  cc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
  d0:	08 95       	ret

000000d2 <PWM_gen>:
	}
	
}
static void PWM_gen(void)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
	PWM_Count++;
  d6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <PWM_Count>
  da:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <PWM_Count+0x1>
  de:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <PWM_Count+0x2>
  e2:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <PWM_Count+0x3>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <PWM_Count>
  f0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <PWM_Count+0x1>
  f4:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <PWM_Count+0x2>
  f8:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <PWM_Count+0x3>
	if (PWM_Count==PWM_count_OFF)
  fc:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <PWM_count_OFF>
 100:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <PWM_count_OFF+0x1>
 104:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <PWM_count_OFF+0x2>
 108:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <PWM_count_OFF+0x3>
 10c:	80 17       	cp	r24, r16
 10e:	91 07       	cpc	r25, r17
 110:	a2 07       	cpc	r26, r18
 112:	b3 07       	cpc	r27, r19
 114:	09 f0       	breq	.+2      	; 0x118 <PWM_gen+0x46>
 116:	99 c0       	rjmp	.+306    	; 0x24a <PWM_gen+0x178>
	{
		switch(select_pwm)
 118:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <select_pwm>
 11c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <select_pwm+0x1>
 120:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <select_pwm+0x2>
 124:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <select_pwm+0x3>
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	91 05       	cpc	r25, r1
 12c:	08 f0       	brcs	.+2      	; 0x130 <PWM_gen+0x5e>
 12e:	b6 c0       	rjmp	.+364    	; 0x29c <PWM_gen+0x1ca>
 130:	fc 01       	movw	r30, r24
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__tablejump2__>
		{
			case 0:
			
			LED_off(LED0_PORT,LED0_PIN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED1_PORT,LED1_PIN);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED2_PORT,LED2_PIN);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED3_PORT,LED3_PIN);
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			break;
 15a:	a0 c0       	rjmp	.+320    	; 0x29c <PWM_gen+0x1ca>
			case 1:
			LED_on(LED0_PORT,LED0_PIN);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_off(LED1_PORT,LED1_PIN);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED2_PORT,LED2_PIN);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED3_PORT,LED3_PIN);
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			break;
 17c:	8f c0       	rjmp	.+286    	; 0x29c <PWM_gen+0x1ca>
			case 2:			
			LED_on(LED0_PORT,LED0_PIN);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED1_PORT,LED1_PIN);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_off(LED2_PORT,LED2_PIN);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED3_PORT,LED3_PIN);
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			break;
 19e:	7e c0       	rjmp	.+252    	; 0x29c <PWM_gen+0x1ca>
			case 3:
			LED_on(LED0_PORT,LED0_PIN);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED1_PORT,LED1_PIN);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED2_PORT,LED2_PIN);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_off(LED3_PORT,LED3_PIN);
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			break;
 1c0:	6d c0       	rjmp	.+218    	; 0x29c <PWM_gen+0x1ca>
			case 4:
			LED_on(LED0_PORT,LED0_PIN);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED1_PORT,LED1_PIN);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED2_PORT,LED2_PIN);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED3_PORT,LED3_PIN);
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			break;
 1e2:	5c c0       	rjmp	.+184    	; 0x29c <PWM_gen+0x1ca>
			case 5:
			LED_off(LED0_PORT,LED0_PIN);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_on(LED1_PORT,LED1_PIN);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED2_PORT,LED2_PIN);
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED3_PORT,LED3_PIN);
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			break;
 204:	4b c0       	rjmp	.+150    	; 0x29c <PWM_gen+0x1ca>
			case 6:
			LED_off(LED0_PORT,LED0_PIN);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED1_PORT,LED1_PIN);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_on(LED2_PORT,LED2_PIN);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED3_PORT,LED3_PIN);
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			break;
 226:	3a c0       	rjmp	.+116    	; 0x29c <PWM_gen+0x1ca>
			case 7:
			LED_off(LED0_PORT,LED0_PIN);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED1_PORT,LED1_PIN);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_off(LED2_PORT,LED2_PIN);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
			LED_on(LED3_PORT,LED3_PIN);
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			break;
 248:	29 c0       	rjmp	.+82     	; 0x29c <PWM_gen+0x1ca>
			// do nothing
			break;
			
		}
	}
	else if (PWM_Count==(PWM_count_OFF+PWM_count_ON))
 24a:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <PWM_count_ON>
 24e:	50 91 7d 00 	lds	r21, 0x007D	; 0x80007d <PWM_count_ON+0x1>
 252:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <PWM_count_ON+0x2>
 256:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <PWM_count_ON+0x3>
 25a:	40 0f       	add	r20, r16
 25c:	51 1f       	adc	r21, r17
 25e:	62 1f       	adc	r22, r18
 260:	73 1f       	adc	r23, r19
 262:	84 17       	cp	r24, r20
 264:	95 07       	cpc	r25, r21
 266:	a6 07       	cpc	r26, r22
 268:	b7 07       	cpc	r27, r23
 26a:	c1 f4       	brne	.+48     	; 0x29c <PWM_gen+0x1ca>
	{
		
		LED_off(LED0_PORT,LED0_PIN);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
		LED_off(LED1_PORT,LED1_PIN);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
		LED_off(LED2_PORT,LED2_PIN);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
		LED_off(LED3_PORT,LED3_PIN);
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LED_off>
		PWM_Count=0;
 28c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <PWM_Count>
 290:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <PWM_Count+0x1>
 294:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <PWM_Count+0x2>
 298:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <PWM_Count+0x3>
	}
	else
	{
		// do nothing
	}
	TIMER_set(Intial_value_PWM);
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 9d 04 	call	0x93a	; 0x93a <TIMER_set>
}
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <APP_init>:

boolean APP_init(void)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
	u8 u8_l_ret = Done;
	u8_l_ret = BUTTON_init (EX_INT0_PORT, EX_INT0_PIN);
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 c9 01 	call	0x392	; 0x392 <BUTTON_init>
 2b4:	c8 2f       	mov	r28, r24
	if (Done == u8_l_ret)
 2b6:	81 11       	cpse	r24, r1
 2b8:	45 c0       	rjmp	.+138    	; 0x344 <APP_init+0x9c>
	{
		u8_l_ret = BUTTON_init (EX_INT1_PORT, EX_INT1_PIN);
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 c9 01 	call	0x392	; 0x392 <BUTTON_init>
 2c2:	d8 2f       	mov	r29, r24
		if (Done == u8_l_ret)
 2c4:	81 11       	cpse	r24, r1
 2c6:	47 c0       	rjmp	.+142    	; 0x356 <APP_init+0xae>
		{
			u8_l_ret = EX_INT_init(INT0 , rising_edge);
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <EX_INT_init>
 2d0:	c8 2f       	mov	r28, r24
			if (Done == u8_l_ret)
 2d2:	81 11       	cpse	r24, r1
 2d4:	39 c0       	rjmp	.+114    	; 0x348 <APP_init+0xa0>
			{
				EX_INT0_SET_CALLBACK (EX_INT0_ISR);
 2d6:	81 e5       	ldi	r24, 0x51	; 81
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 86 03 	call	0x70c	; 0x70c <EX_INT0_SET_CALLBACK>
				u8_l_ret = EX_INT_init(INT1 , rising_edge);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <EX_INT_init>
 2e6:	d8 2f       	mov	r29, r24
				if (Done == u8_l_ret)
 2e8:	81 11       	cpse	r24, r1
 2ea:	35 c0       	rjmp	.+106    	; 0x356 <APP_init+0xae>
				{
					EX_INT1_SET_CALLBACK (EX_INT1_ISR);
 2ec:	8c e5       	ldi	r24, 0x5C	; 92
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 8b 03 	call	0x716	; 0x716 <EX_INT1_SET_CALLBACK>
					u8_l_ret = TIMER_init (Normal,Intial_value_PWM); // start counting from 6
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 0b 04 	call	0x816	; 0x816 <TIMER_init>
 2fc:	c8 2f       	mov	r28, r24
					if (Done == u8_l_ret)
 2fe:	81 11       	cpse	r24, r1
 300:	25 c0       	rjmp	.+74     	; 0x34c <APP_init+0xa4>
					{
						Timer0_Ovf_CALLBACK (PWM_gen);
 302:	89 e6       	ldi	r24, 0x69	; 105
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 1c 05 	call	0xa38	; 0xa38 <Timer0_Ovf_CALLBACK>
						u8_l_ret = LED_init (LED0_PORT,LED0_PIN);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_init>
 312:	d8 2f       	mov	r29, r24
						if (Done == u8_l_ret)
 314:	81 11       	cpse	r24, r1
 316:	1f c0       	rjmp	.+62     	; 0x356 <APP_init+0xae>
						{
							u8_l_ret = LED_init (LED1_PORT,LED1_PIN);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_init>
 320:	c8 2f       	mov	r28, r24
							if (Done == u8_l_ret)
 322:	81 11       	cpse	r24, r1
 324:	15 c0       	rjmp	.+42     	; 0x350 <APP_init+0xa8>
							{
								u8_l_ret = LED_init (LED2_PORT,LED2_PIN);
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_init>
 32e:	d8 2f       	mov	r29, r24
								if (Done == u8_l_ret)
 330:	81 11       	cpse	r24, r1
 332:	11 c0       	rjmp	.+34     	; 0x356 <APP_init+0xae>
								{
									u8_l_ret = LED_init (LED3_PORT,LED3_PIN);
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_init>
									if (Done == u8_l_ret)
 33c:	81 11       	cpse	r24, r1
 33e:	0a c0       	rjmp	.+20     	; 0x354 <APP_init+0xac>
									{
										u8_l_ret = true;
 340:	c1 e0       	ldi	r28, 0x01	; 1
 342:	09 c0       	rjmp	.+18     	; 0x356 <APP_init+0xae>
			u8_l_ret = false;
		}
	} 
	else
	{
		u8_l_ret = false;
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	07 c0       	rjmp	.+14     	; 0x356 <APP_init+0xae>
					u8_l_ret = false;
				}
			}
			else
			{
				u8_l_ret = false;
 348:	cd 2f       	mov	r28, r29
 34a:	05 c0       	rjmp	.+10     	; 0x356 <APP_init+0xae>
							u8_l_ret = false;
						}
					}
					else
					{
						u8_l_ret = false;
 34c:	cd 2f       	mov	r28, r29
 34e:	03 c0       	rjmp	.+6      	; 0x356 <APP_init+0xae>
									u8_l_ret = false;
								}
							}
							else
							{
								u8_l_ret = false;
 350:	cd 2f       	mov	r28, r29
 352:	01 c0       	rjmp	.+2      	; 0x356 <APP_init+0xae>
									{
										u8_l_ret = true;
									}
									else
									{
										u8_l_ret = false;
 354:	cd 2f       	mov	r28, r29
	} 
	else
	{
		u8_l_ret = false;
	}
	return u8_l_ret;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	c1 11       	cpse	r28, r1
 35a:	01 c0       	rjmp	.+2      	; 0x35e <APP_init+0xb6>
 35c:	80 e0       	ldi	r24, 0x00	; 0
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <APP_start>:

void APP_start(void)
{
	TIMER_PWM_start(blink_states[blink_state]);	
 364:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	e0 5a       	subi	r30, 0xA0	; 160
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	80 81       	ld	r24, Z
 374:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_PWM_start>
	while(1)
	{
		TIMER_PWM_set ((blink_states[blink_state]) , state_number);
 378:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e0 5a       	subi	r30, 0xA0	; 160
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <state_number>
 38a:	80 81       	ld	r24, Z
 38c:	0e 94 a0 04 	call	0x940	; 0x940 <TIMER_PWM_set>
 390:	f3 cf       	rjmp	.-26     	; 0x378 <APP_start+0x14>

00000392 <BUTTON_init>:
 * Created: 4/9/2023 9:10:35 AM
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "button.h"
u8 BUTTON_init (u8 buttonport, u8 buttonpin){
	return DIO_init(buttonport,buttonpin,IN);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_init>
}
 398:	08 95       	ret

0000039a <LED_init>:
 */ 
#include "led.h"

u8 LED_init (u8 port, u8 pin)
{
	return DIO_init(port,pin,OUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_init>
}
 3a0:	08 95       	ret

000003a2 <LED_on>:
u8 LED_on (u8 port, u8 pin)
{
	return DIO_write(port,pin,HIGH);
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_write>
}
 3a8:	08 95       	ret

000003aa <LED_off>:
u8 LED_off (u8 port, u8 pin)
{
	return DIO_write(port,pin,LOW);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_write>
}
 3b0:	08 95       	ret

000003b2 <main>:
#include "APPLICATION/application.h"


int main(void)
{
	if (APP_init() == true)
 3b2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <APP_init>
 3b6:	81 11       	cpse	r24, r1
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <main+0x2a>
	else
	{
		//ALL LEDS will be ON For error visualization
		while(1)
		{
			LED_on(LED0_PORT,LED0_PIN);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED1_PORT,LED1_PIN);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED2_PORT,LED2_PIN);
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
			LED_on(LED3_PORT,LED3_PIN);
 3d2:	63 e0       	ldi	r22, 0x03	; 3
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LED_on>
 3da:	ef cf       	rjmp	.-34     	; 0x3ba <main+0x8>
		}
	}	
	 
    while (1) 
    {
		APP_start();
 3dc:	0e 94 b2 01 	call	0x364	; 0x364 <APP_start>
 3e0:	fd cf       	rjmp	.-6      	; 0x3dc <main+0x2a>

000003e2 <DIO_init>:
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
	if (((P7 >=enm_a_pinNumber)==true) && ((P0 <=enm_a_pinNumber)==true))
 3e2:	68 30       	cpi	r22, 0x08	; 8
 3e4:	08 f0       	brcs	.+2      	; 0x3e8 <DIO_init+0x6>
 3e6:	7e c0       	rjmp	.+252    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
	{
		switch(enm_a_portNumber)
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	29 f1       	breq	.+74     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3ec:	38 f0       	brcs	.+14     	; 0x3fc <DIO_init+0x1a>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_init+0x12>
 3f2:	3e c0       	rjmp	.+124    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_init+0x18>
 3f8:	58 c0       	rjmp	.+176    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 3fa:	76 c0       	rjmp	.+236    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
		{
			case A:
			if (enm_a_pinDirection == OUT)
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	61 f4       	brne	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				{
					SET_BIT( DIO_U8_DDRA_REG , enm_a_pinNumber );    //Set Initial PortA Direction
 400:	2a b3       	in	r18, 0x1a	; 26
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	82 2b       	or	r24, r18
 412:	8a bb       	out	0x1a, r24	; 26
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
			case A:
			if (enm_a_pinDirection == OUT)
				{
					SET_BIT( DIO_U8_DDRA_REG , enm_a_pinNumber );    //Set Initial PortA Direction
				}
				else if (enm_a_pinDirection == IN)
 418:	41 11       	cpse	r20, r1
 41a:	68 c0       	rjmp	.+208    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
				{
					CLR_BIT( DIO_U8_DDRA_REG ,enm_a_pinNumber);   //clear Initial PortA Direction
 41c:	2a b3       	in	r18, 0x1a	; 26
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	80 95       	com	r24
 42e:	82 23       	and	r24, r18
 430:	8a bb       	out	0x1a, r24	; 26
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
				{
					u8_l_ret = DIO_PIN_DIRECTION_ERROR;
				}
			break;
			case B:
			if (enm_a_pinDirection == OUT)
 436:	41 30       	cpi	r20, 0x01	; 1
 438:	61 f4       	brne	.+24     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				SET_BIT( DIO_U8_DDRB_REG , enm_a_pinNumber );    //Set Initial PortB Direction
 43a:	27 b3       	in	r18, 0x17	; 23
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	82 2b       	or	r24, r18
 44c:	87 bb       	out	0x17, r24	; 23
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
			case B:
			if (enm_a_pinDirection == OUT)
			{
				SET_BIT( DIO_U8_DDRB_REG , enm_a_pinNumber );    //Set Initial PortB Direction
			}
			else if (enm_a_pinDirection == IN)
 452:	41 11       	cpse	r20, r1
 454:	4d c0       	rjmp	.+154    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			{
				CLR_BIT( DIO_U8_DDRB_REG , enm_a_pinNumber );   //clear Initial PortB Direction
 456:	27 b3       	in	r18, 0x17	; 23
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	87 bb       	out	0x17, r24	; 23
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
			}
			break;
			case C:
			if (enm_a_pinDirection == OUT)
 470:	41 30       	cpi	r20, 0x01	; 1
 472:	61 f4       	brne	.+24     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			{
				SET_BIT( DIO_U8_DDRC_REG , enm_a_pinNumber );    //Set Initial PortC Direction
 474:	24 b3       	in	r18, 0x14	; 20
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	82 2b       	or	r24, r18
 486:	84 bb       	out	0x14, r24	; 20
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
			case C:
			if (enm_a_pinDirection == OUT)
			{
				SET_BIT( DIO_U8_DDRC_REG , enm_a_pinNumber );    //Set Initial PortC Direction
			}
			else if (enm_a_pinDirection == IN)
 48c:	41 11       	cpse	r20, r1
 48e:	32 c0       	rjmp	.+100    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			{
				CLR_BIT( DIO_U8_DDRC_REG  , enm_a_pinNumber );   //clear Initial PortC Direction
 490:	24 b3       	in	r18, 0x14	; 20
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	84 bb       	out	0x14, r24	; 20
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
			}			
			break;
			case D:
			if (enm_a_pinDirection == OUT)
 4aa:	41 30       	cpi	r20, 0x01	; 1
 4ac:	61 f4       	brne	.+24     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			{
				SET_BIT( DIO_U8_DDRD_REG , enm_a_pinNumber );    //Set Initial PortD Direction
 4ae:	21 b3       	in	r18, 0x11	; 17
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	82 2b       	or	r24, r18
 4c0:	81 bb       	out	0x11, r24	; 17
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
			case D:
			if (enm_a_pinDirection == OUT)
			{
				SET_BIT( DIO_U8_DDRD_REG , enm_a_pinNumber );    //Set Initial PortD Direction
			}
			else if (enm_a_pinDirection == IN)
 4c6:	41 11       	cpse	r20, r1
 4c8:	17 c0       	rjmp	.+46     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			{
				CLR_BIT( DIO_U8_DDRD_REG , enm_a_pinNumber );   //clear Initial PortD Direction
 4ca:	21 b3       	in	r18, 0x11	; 17
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	81 bb       	out	0x11, r24	; 17
 Output: void
 Description: Function to initialize Pin direction.
*/
enm_dio_errors_t DIO_init ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinDirection_t enm_a_pinDirection )
{
	u8 u8_l_ret = DIO_OKAY;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
			break;
		}	
	}
	else
	{
		u8_l_ret = DIO_PIN_NUMBER_ERROR;
 4e4:	82 ef       	ldi	r24, 0xF2	; 242
 4e6:	08 95       	ret
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
			}			
			break;
			default:
			u8_l_ret = DIO_PORT_NUMBER_ERROR;
 4e8:	81 ef       	ldi	r24, 0xF1	; 241
 4ea:	08 95       	ret
				{
					CLR_BIT( DIO_U8_DDRA_REG ,enm_a_pinNumber);   //clear Initial PortA Direction
				}
				else
				{
					u8_l_ret = DIO_PIN_DIRECTION_ERROR;
 4ec:	80 ef       	ldi	r24, 0xF0	; 240
 4ee:	08 95       	ret
			{
				CLR_BIT( DIO_U8_DDRB_REG , enm_a_pinNumber );   //clear Initial PortB Direction
			}
			else
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
 4f0:	80 ef       	ldi	r24, 0xF0	; 240
 4f2:	08 95       	ret
			{
				CLR_BIT( DIO_U8_DDRC_REG  , enm_a_pinNumber );   //clear Initial PortC Direction
			}
			else
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
 4f4:	80 ef       	ldi	r24, 0xF0	; 240
 4f6:	08 95       	ret
			{
				CLR_BIT( DIO_U8_DDRD_REG , enm_a_pinNumber );   //clear Initial PortD Direction
			}
			else
			{
				u8_l_ret = DIO_PIN_DIRECTION_ERROR;
 4f8:	80 ef       	ldi	r24, 0xF0	; 240
	else
	{
		u8_l_ret = DIO_PIN_NUMBER_ERROR;
	}
	return u8_l_ret;
}
 4fa:	08 95       	ret

000004fc <DIO_write>:
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
	if (((P7 >=enm_a_pinNumber)==true) && ((P0 <=enm_a_pinNumber)==true))
 4fc:	68 30       	cpi	r22, 0x08	; 8
 4fe:	08 f0       	brcs	.+2      	; 0x502 <DIO_write+0x6>
 500:	7e c0       	rjmp	.+252    	; 0x5fe <DIO_write+0x102>
	{
		switch(enm_a_portNumber)
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	29 f1       	breq	.+74     	; 0x550 <DIO_write+0x54>
 506:	38 f0       	brcs	.+14     	; 0x516 <DIO_write+0x1a>
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	09 f4       	brne	.+2      	; 0x50e <DIO_write+0x12>
 50c:	3e c0       	rjmp	.+124    	; 0x58a <DIO_write+0x8e>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	09 f4       	brne	.+2      	; 0x514 <DIO_write+0x18>
 512:	58 c0       	rjmp	.+176    	; 0x5c4 <DIO_write+0xc8>
 514:	76 c0       	rjmp	.+236    	; 0x602 <DIO_write+0x106>
		{
			case A:
				if (enm_a_pinWritevalue == HIGH)
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	61 f4       	brne	.+24     	; 0x532 <DIO_write+0x36>
				{
					SET_BIT( DIO_U8_PORTA_REG , enm_a_pinNumber );	//Set value of pinNumber in PortA
 51a:	2b b3       	in	r18, 0x1b	; 27
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_write+0x2a>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_write+0x26>
 52a:	82 2b       	or	r24, r18
 52c:	8b bb       	out	0x1b, r24	; 27
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
			case A:
				if (enm_a_pinWritevalue == HIGH)
				{
					SET_BIT( DIO_U8_PORTA_REG , enm_a_pinNumber );	//Set value of pinNumber in PortA
				}
				else if (enm_a_pinWritevalue == LOW)
 532:	41 11       	cpse	r20, r1
 534:	68 c0       	rjmp	.+208    	; 0x606 <DIO_write+0x10a>
				{
					CLR_BIT( DIO_U8_PORTA_REG , enm_a_pinNumber );	//clear value of pinNumber in PortA
 536:	2b b3       	in	r18, 0x1b	; 27
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_write+0x46>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_write+0x42>
 546:	80 95       	com	r24
 548:	82 23       	and	r24, r18
 54a:	8b bb       	out	0x1b, r24	; 27
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
				}
			break;
			case B:
				if (enm_a_pinWritevalue == HIGH)
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	61 f4       	brne	.+24     	; 0x56c <DIO_write+0x70>
				{
					SET_BIT( DIO_U8_PORTB_REG , enm_a_pinNumber );	//Set value of pinNumber in PortB
 554:	28 b3       	in	r18, 0x18	; 24
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_write+0x64>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_write+0x60>
 564:	82 2b       	or	r24, r18
 566:	88 bb       	out	0x18, r24	; 24
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
			case B:
				if (enm_a_pinWritevalue == HIGH)
				{
					SET_BIT( DIO_U8_PORTB_REG , enm_a_pinNumber );	//Set value of pinNumber in PortB
				}
				else if (enm_a_pinWritevalue == LOW)
 56c:	41 11       	cpse	r20, r1
 56e:	4d c0       	rjmp	.+154    	; 0x60a <DIO_write+0x10e>
				{
					CLR_BIT( DIO_U8_PORTB_REG , enm_a_pinNumber );	//clear value of pinNumber in PortB
 570:	28 b3       	in	r18, 0x18	; 24
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_write+0x80>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_write+0x7c>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	88 bb       	out	0x18, r24	; 24
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
				}
			break;
			case C:
				if (enm_a_pinWritevalue == HIGH)
 58a:	41 30       	cpi	r20, 0x01	; 1
 58c:	61 f4       	brne	.+24     	; 0x5a6 <DIO_write+0xaa>
				{
					SET_BIT( DIO_U8_PORTC_REG , enm_a_pinNumber );	//Set value of pinNumber in PortC
 58e:	25 b3       	in	r18, 0x15	; 21
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0x9e>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0x9a>
 59e:	82 2b       	or	r24, r18
 5a0:	85 bb       	out	0x15, r24	; 21
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
			case C:
				if (enm_a_pinWritevalue == HIGH)
				{
					SET_BIT( DIO_U8_PORTC_REG , enm_a_pinNumber );	//Set value of pinNumber in PortC
				}
				else if (enm_a_pinWritevalue == LOW)
 5a6:	41 11       	cpse	r20, r1
 5a8:	32 c0       	rjmp	.+100    	; 0x60e <DIO_write+0x112>
				{
					CLR_BIT( DIO_U8_PORTC_REG , enm_a_pinNumber );	//clear value of pinNumber in PortC
 5aa:	25 b3       	in	r18, 0x15	; 21
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_write+0xba>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_write+0xb6>
 5ba:	80 95       	com	r24
 5bc:	82 23       	and	r24, r18
 5be:	85 bb       	out	0x15, r24	; 21
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
				}				
			break;
			case D:
				if (enm_a_pinWritevalue == HIGH)
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	61 f4       	brne	.+24     	; 0x5e0 <DIO_write+0xe4>
				{
					SET_BIT( DIO_U8_PORTD_REG , enm_a_pinNumber );	//Set value of pinNumber in PortD
 5c8:	22 b3       	in	r18, 0x12	; 18
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_write+0xd8>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_write+0xd4>
 5d8:	82 2b       	or	r24, r18
 5da:	82 bb       	out	0x12, r24	; 18
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret
			case D:
				if (enm_a_pinWritevalue == HIGH)
				{
					SET_BIT( DIO_U8_PORTD_REG , enm_a_pinNumber );	//Set value of pinNumber in PortD
				}
				else if (enm_a_pinWritevalue == LOW)
 5e0:	41 11       	cpse	r20, r1
 5e2:	17 c0       	rjmp	.+46     	; 0x612 <DIO_write+0x116>
				{
					CLR_BIT( DIO_U8_PORTD_REG , enm_a_pinNumber );	//clear value of pinNumber in PortD
 5e4:	22 b3       	in	r18, 0x12	; 18
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_write+0xf4>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_write+0xf0>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	82 bb       	out	0x12, r24	; 18
 Output: void
 Description: Function to set Pin value.
*/
enm_dio_errors_t DIO_write ( enm_dio_portNumber_t enm_a_portNumber, enm_dio_pinNumber_t enm_a_pinNumber, enm_dio_pinWritevalue_t enm_a_pinWritevalue )
{
	u8 u8_l_ret = DIO_OKAY;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
			break;
		}
	}
	else
	{
		u8_l_ret = DIO_PIN_NUMBER_ERROR;
 5fe:	82 ef       	ldi	r24, 0xF2	; 242
 600:	08 95       	ret
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
				}				
			break;
			default:
			u8_l_ret = DIO_PORT_NUMBER_ERROR;
 602:	81 ef       	ldi	r24, 0xF1	; 241
 604:	08 95       	ret
				{
					CLR_BIT( DIO_U8_PORTA_REG , enm_a_pinNumber );	//clear value of pinNumber in PortA
				}
				else
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
 606:	83 ef       	ldi	r24, 0xF3	; 243
 608:	08 95       	ret
				{
					CLR_BIT( DIO_U8_PORTB_REG , enm_a_pinNumber );	//clear value of pinNumber in PortB
				}
				else
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
 60a:	83 ef       	ldi	r24, 0xF3	; 243
 60c:	08 95       	ret
				{
					CLR_BIT( DIO_U8_PORTC_REG , enm_a_pinNumber );	//clear value of pinNumber in PortC
				}
				else
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
 60e:	83 ef       	ldi	r24, 0xF3	; 243
 610:	08 95       	ret
				{
					CLR_BIT( DIO_U8_PORTD_REG , enm_a_pinNumber );	//clear value of pinNumber in PortD
				}
				else
				{
					u8_l_ret = DIO_PIN_WRITE_VALUE_ERROR;
 612:	83 ef       	ldi	r24, 0xF3	; 243
	else
	{
		u8_l_ret = DIO_PIN_NUMBER_ERROR;
	}
	return u8_l_ret;
}
 614:	08 95       	ret

00000616 <SIE>:
{
	Callbackptr1 = copyFuncptr;
}
void EX_INT2_SET_CALLBACK (void (*copyFuncptr) (void))
{
	Callbackptr2 = copyFuncptr;
 616:	8f b7       	in	r24, 0x3f	; 63
 618:	80 68       	ori	r24, 0x80	; 128
 61a:	8f bf       	out	0x3f, r24	; 63
 61c:	08 95       	ret

0000061e <INT_SENSE>:
 61e:	86 30       	cpi	r24, 0x06	; 6
 620:	29 f0       	breq	.+10     	; 0x62c <INT_SENSE+0xe>
 622:	87 30       	cpi	r24, 0x07	; 7
 624:	b9 f0       	breq	.+46     	; 0x654 <INT_SENSE+0x36>
 626:	85 30       	cpi	r24, 0x05	; 5
 628:	b9 f5       	brne	.+110    	; 0x698 <INT_SENSE+0x7a>
 62a:	28 c0       	rjmp	.+80     	; 0x67c <INT_SENSE+0x5e>
 62c:	62 30       	cpi	r22, 0x02	; 2
 62e:	41 f4       	brne	.+16     	; 0x640 <INT_SENSE+0x22>
 630:	85 b7       	in	r24, 0x35	; 53
 632:	82 60       	ori	r24, 0x02	; 2
 634:	85 bf       	out	0x35, r24	; 53
 636:	85 b7       	in	r24, 0x35	; 53
 638:	81 60       	ori	r24, 0x01	; 1
 63a:	85 bf       	out	0x35, r24	; 53
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
 640:	61 30       	cpi	r22, 0x01	; 1
 642:	61 f5       	brne	.+88     	; 0x69c <INT_SENSE+0x7e>
 644:	85 b7       	in	r24, 0x35	; 53
 646:	82 60       	ori	r24, 0x02	; 2
 648:	85 bf       	out	0x35, r24	; 53
 64a:	85 b7       	in	r24, 0x35	; 53
 64c:	8e 7f       	andi	r24, 0xFE	; 254
 64e:	85 bf       	out	0x35, r24	; 53
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	08 95       	ret
 654:	62 30       	cpi	r22, 0x02	; 2
 656:	41 f4       	brne	.+16     	; 0x668 <INT_SENSE+0x4a>
 658:	85 b7       	in	r24, 0x35	; 53
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	85 bf       	out	0x35, r24	; 53
 65e:	85 b7       	in	r24, 0x35	; 53
 660:	84 60       	ori	r24, 0x04	; 4
 662:	85 bf       	out	0x35, r24	; 53
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
 668:	61 30       	cpi	r22, 0x01	; 1
 66a:	d1 f4       	brne	.+52     	; 0x6a0 <INT_SENSE+0x82>
 66c:	85 b7       	in	r24, 0x35	; 53
 66e:	88 60       	ori	r24, 0x08	; 8
 670:	85 bf       	out	0x35, r24	; 53
 672:	85 b7       	in	r24, 0x35	; 53
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	85 bf       	out	0x35, r24	; 53
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
 67c:	61 30       	cpi	r22, 0x01	; 1
 67e:	29 f4       	brne	.+10     	; 0x68a <INT_SENSE+0x6c>
 680:	84 b7       	in	r24, 0x34	; 52
 682:	80 64       	ori	r24, 0x40	; 64
 684:	84 bf       	out	0x34, r24	; 52
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
 68a:	61 11       	cpse	r22, r1
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <INT_SENSE+0x86>
 68e:	84 b7       	in	r24, 0x34	; 52
 690:	8b 7f       	andi	r24, 0xFB	; 251
 692:	84 bf       	out	0x34, r24	; 52
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
 698:	80 ee       	ldi	r24, 0xE0	; 224
 69a:	08 95       	ret
 69c:	81 ee       	ldi	r24, 0xE1	; 225
 69e:	08 95       	ret
 6a0:	81 ee       	ldi	r24, 0xE1	; 225
 6a2:	08 95       	ret
 6a4:	81 ee       	ldi	r24, 0xE1	; 225
 6a6:	08 95       	ret

000006a8 <EX_INT_Enable>:
 6a8:	86 30       	cpi	r24, 0x06	; 6
 6aa:	41 f4       	brne	.+16     	; 0x6bc <EX_INT_Enable+0x14>
 6ac:	8b b7       	in	r24, 0x3b	; 59
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	8b bf       	out	0x3b, r24	; 59
 6b2:	8a b7       	in	r24, 0x3a	; 58
 6b4:	80 64       	ori	r24, 0x40	; 64
 6b6:	8a bf       	out	0x3a, r24	; 58
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	08 95       	ret
 6bc:	87 30       	cpi	r24, 0x07	; 7
 6be:	29 f4       	brne	.+10     	; 0x6ca <EX_INT_Enable+0x22>
 6c0:	8b b7       	in	r24, 0x3b	; 59
 6c2:	80 68       	ori	r24, 0x80	; 128
 6c4:	8b bf       	out	0x3b, r24	; 59
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
 6ca:	85 30       	cpi	r24, 0x05	; 5
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <EX_INT_Enable+0x30>
 6ce:	8b b7       	in	r24, 0x3b	; 59
 6d0:	80 62       	ori	r24, 0x20	; 32
 6d2:	8b bf       	out	0x3b, r24	; 59
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
 6d8:	80 ee       	ldi	r24, 0xE0	; 224
 6da:	08 95       	ret

000006dc <EX_INT_init>:
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	c8 2f       	mov	r28, r24
 6e2:	d6 2f       	mov	r29, r22
 6e4:	0e 94 0b 03 	call	0x616	; 0x616 <SIE>
 6e8:	6d 2f       	mov	r22, r29
 6ea:	8c 2f       	mov	r24, r28
 6ec:	0e 94 0f 03 	call	0x61e	; 0x61e <INT_SENSE>
 6f0:	81 11       	cpse	r24, r1
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <EX_INT_init+0x24>
 6f4:	8c 2f       	mov	r24, r28
 6f6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <EX_INT_Enable>
 6fa:	81 11       	cpse	r24, r1
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <EX_INT_init+0x28>
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <EX_INT_init+0x2a>
 700:	81 ee       	ldi	r24, 0xE1	; 225
 702:	01 c0       	rjmp	.+2      	; 0x706 <EX_INT_init+0x2a>
 704:	82 ee       	ldi	r24, 0xE2	; 226
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <EX_INT0_SET_CALLBACK>:
 70c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Callbackptr0+0x1>
 710:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Callbackptr0>
 714:	08 95       	ret

00000716 <EX_INT1_SET_CALLBACK>:
 716:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <Callbackptr1+0x1>
 71a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Callbackptr1>
 71e:	08 95       	ret

00000720 <__vector_1>:
}


ISR (EXT_INT_0)
{
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
	if(Callbackptr0 == 0)
 742:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Callbackptr0>
 746:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Callbackptr0+0x1>
 74a:	30 97       	sbiw	r30, 0x00	; 0
 74c:	09 f0       	breq	.+2      	; 0x750 <__vector_1+0x30>
	{
				
	}
	else
	{
		Callbackptr0();
 74e:	09 95       	icall
	}
}
 750:	ff 91       	pop	r31
 752:	ef 91       	pop	r30
 754:	bf 91       	pop	r27
 756:	af 91       	pop	r26
 758:	9f 91       	pop	r25
 75a:	8f 91       	pop	r24
 75c:	7f 91       	pop	r23
 75e:	6f 91       	pop	r22
 760:	5f 91       	pop	r21
 762:	4f 91       	pop	r20
 764:	3f 91       	pop	r19
 766:	2f 91       	pop	r18
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti

00000772 <__vector_2>:
ISR ( EXT_INT_1 )
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
	if(Callbackptr1 == 0)
 794:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Callbackptr1>
 798:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Callbackptr1+0x1>
 79c:	30 97       	sbiw	r30, 0x00	; 0
 79e:	09 f0       	breq	.+2      	; 0x7a2 <__vector_2+0x30>
	{
				
	}
	else
	{
		Callbackptr1();
 7a0:	09 95       	icall
	}
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_3>:
ISR (EXT_INT_2)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	if(Callbackptr2 == 0)
 7e6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Callbackptr2>
 7ea:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Callbackptr2+0x1>
 7ee:	30 97       	sbiw	r30, 0x00	; 0
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_3+0x30>
	{
			
	}
	else
	{
		Callbackptr2();
 7f2:	09 95       	icall
	}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <TIMER_init>:
		TIFR |= clear;
	}
}
void TIMER_Stop (void){
	//Timer Stop
	TCCR0 = no_clk;
 816:	81 33       	cpi	r24, 0x31	; 49
 818:	60 f4       	brcc	.+24     	; 0x832 <TIMER_init+0x1c>
 81a:	83 b7       	in	r24, 0x33	; 51
 81c:	13 be       	out	0x33, r1	; 51
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	83 bf       	out	0x33, r24	; 51
 822:	8f b7       	in	r24, 0x3f	; 63
 824:	80 68       	ori	r24, 0x80	; 128
 826:	8f bf       	out	0x3f, r24	; 63
 828:	89 b7       	in	r24, 0x39	; 57
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	89 bf       	out	0x39, r24	; 57
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	01 c0       	rjmp	.+2      	; 0x834 <TIMER_init+0x1e>
 832:	80 ee       	ldi	r24, 0xE0	; 224
 834:	62 bf       	out	0x32, r22	; 50
 836:	08 95       	ret

00000838 <TIMER_start>:
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	98 0f       	add	r25, r24
 83c:	95 30       	cpi	r25, 0x05	; 5
 83e:	28 f4       	brcc	.+10     	; 0x84a <TIMER_start+0x12>
 840:	93 b7       	in	r25, 0x33	; 51
 842:	89 2b       	or	r24, r25
 844:	83 bf       	out	0x33, r24	; 51
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
 84a:	82 ee       	ldi	r24, 0xE2	; 226
 84c:	08 95       	ret

0000084e <TIMER_PWM_start>:
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	cf 93       	push	r28
 858:	85 36       	cpi	r24, 0x65	; 101
 85a:	08 f0       	brcs	.+2      	; 0x85e <TIMER_PWM_start+0x10>
 85c:	67 c0       	rjmp	.+206    	; 0x92c <__stack+0xcd>
 85e:	c8 2f       	mov	r28, r24
 860:	68 2f       	mov	r22, r24
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	48 ec       	ldi	r20, 0xC8	; 200
 872:	52 e4       	ldi	r21, 0x42	; 66
 874:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divsf3>
 878:	20 e0       	ldi	r18, 0x00	; 0
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	4a e7       	ldi	r20, 0x7A	; 122
 87e:	54 e4       	ldi	r21, 0x44	; 68
 880:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 884:	20 e0       	ldi	r18, 0x00	; 0
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	4a e7       	ldi	r20, 0x7A	; 122
 88a:	54 e4       	ldi	r21, 0x44	; 68
 88c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 890:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
 894:	0f 2e       	mov	r0, r31
 896:	fa ef       	ldi	r31, 0xFA	; 250
 898:	cf 2e       	mov	r12, r31
 89a:	d1 2c       	mov	r13, r1
 89c:	e1 2c       	mov	r14, r1
 89e:	f1 2c       	mov	r15, r1
 8a0:	f0 2d       	mov	r31, r0
 8a2:	a7 01       	movw	r20, r14
 8a4:	96 01       	movw	r18, r12
 8a6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodsi4>
 8aa:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <PWM_count_ON>
 8ae:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <PWM_count_ON+0x1>
 8b2:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <PWM_count_ON+0x2>
 8b6:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <PWM_count_ON+0x3>
 8ba:	64 e6       	ldi	r22, 0x64	; 100
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	6c 1b       	sub	r22, r28
 8c0:	71 09       	sbc	r23, r1
 8c2:	07 2e       	mov	r0, r23
 8c4:	00 0c       	add	r0, r0
 8c6:	88 0b       	sbc	r24, r24
 8c8:	99 0b       	sbc	r25, r25
 8ca:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	48 ec       	ldi	r20, 0xC8	; 200
 8d4:	52 e4       	ldi	r21, 0x42	; 66
 8d6:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divsf3>
 8da:	20 e0       	ldi	r18, 0x00	; 0
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	4a e7       	ldi	r20, 0x7A	; 122
 8e0:	54 e4       	ldi	r21, 0x44	; 68
 8e2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	4a e7       	ldi	r20, 0x7A	; 122
 8ec:	54 e4       	ldi	r21, 0x44	; 68
 8ee:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 8f2:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
 8f6:	a7 01       	movw	r20, r14
 8f8:	96 01       	movw	r18, r12
 8fa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodsi4>
 8fe:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <PWM_count_OFF>
 902:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <PWM_count_OFF+0x1>
 906:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <PWM_count_OFF+0x2>
 90a:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <PWM_count_OFF+0x3>
 90e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <PWM_Count>
 912:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <PWM_Count+0x1>
 916:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <PWM_Count+0x2>
 91a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <PWM_Count+0x3>
 91e:	86 e0       	ldi	r24, 0x06	; 6
 920:	82 bf       	out	0x32, r24	; 50
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	0e 94 1c 04 	call	0x838	; 0x838 <TIMER_start>
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0xcf>
 92c:	83 ee       	ldi	r24, 0xE3	; 227
 92e:	cf 91       	pop	r28
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	df 90       	pop	r13
 936:	cf 90       	pop	r12
 938:	08 95       	ret

0000093a <TIMER_set>:
 93a:	82 bf       	out	0x32, r24	; 50
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	08 95       	ret

00000940 <TIMER_PWM_set>:
 940:	cf 92       	push	r12
 942:	df 92       	push	r13
 944:	ef 92       	push	r14
 946:	ff 92       	push	r15
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	68 30       	cpi	r22, 0x08	; 8
 94e:	70 f4       	brcc	.+28     	; 0x96c <TIMER_PWM_set+0x2c>
 950:	46 2f       	mov	r20, r22
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	40 93 80 00 	sts	0x0080, r20	; 0x800080 <select_pwm>
 95c:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <select_pwm+0x1>
 960:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <select_pwm+0x2>
 964:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <select_pwm+0x3>
 968:	d0 e0       	ldi	r29, 0x00	; 0
 96a:	01 c0       	rjmp	.+2      	; 0x96e <TIMER_PWM_set+0x2e>
 96c:	d4 ee       	ldi	r29, 0xE4	; 228
 96e:	85 36       	cpi	r24, 0x65	; 101
 970:	08 f0       	brcs	.+2      	; 0x974 <TIMER_PWM_set+0x34>
 972:	59 c0       	rjmp	.+178    	; 0xa26 <TIMER_PWM_set+0xe6>
 974:	c8 2f       	mov	r28, r24
 976:	68 2f       	mov	r22, r24
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
 982:	20 e0       	ldi	r18, 0x00	; 0
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	48 ec       	ldi	r20, 0xC8	; 200
 988:	52 e4       	ldi	r21, 0x42	; 66
 98a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divsf3>
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	4a e7       	ldi	r20, 0x7A	; 122
 994:	54 e4       	ldi	r21, 0x44	; 68
 996:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	4a e7       	ldi	r20, 0x7A	; 122
 9a0:	54 e4       	ldi	r21, 0x44	; 68
 9a2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 9a6:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
 9aa:	0f 2e       	mov	r0, r31
 9ac:	fa ef       	ldi	r31, 0xFA	; 250
 9ae:	cf 2e       	mov	r12, r31
 9b0:	d1 2c       	mov	r13, r1
 9b2:	e1 2c       	mov	r14, r1
 9b4:	f1 2c       	mov	r15, r1
 9b6:	f0 2d       	mov	r31, r0
 9b8:	a7 01       	movw	r20, r14
 9ba:	96 01       	movw	r18, r12
 9bc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodsi4>
 9c0:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <PWM_count_ON>
 9c4:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <PWM_count_ON+0x1>
 9c8:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <PWM_count_ON+0x2>
 9cc:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <PWM_count_ON+0x3>
 9d0:	64 e6       	ldi	r22, 0x64	; 100
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	6c 1b       	sub	r22, r28
 9d6:	71 09       	sbc	r23, r1
 9d8:	07 2e       	mov	r0, r23
 9da:	00 0c       	add	r0, r0
 9dc:	88 0b       	sbc	r24, r24
 9de:	99 0b       	sbc	r25, r25
 9e0:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	48 ec       	ldi	r20, 0xC8	; 200
 9ea:	52 e4       	ldi	r21, 0x42	; 66
 9ec:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divsf3>
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	4a e7       	ldi	r20, 0x7A	; 122
 9f6:	54 e4       	ldi	r21, 0x44	; 68
 9f8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	4a e7       	ldi	r20, 0x7A	; 122
 a02:	54 e4       	ldi	r21, 0x44	; 68
 a04:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3>
 a08:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
 a0c:	a7 01       	movw	r20, r14
 a0e:	96 01       	movw	r18, r12
 a10:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__udivmodsi4>
 a14:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <PWM_count_OFF>
 a18:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <PWM_count_OFF+0x1>
 a1c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <PWM_count_OFF+0x2>
 a20:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <PWM_count_OFF+0x3>
 a24:	01 c0       	rjmp	.+2      	; 0xa28 <TIMER_PWM_set+0xe8>
 a26:	d3 ee       	ldi	r29, 0xE3	; 227
 a28:	8d 2f       	mov	r24, r29
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	ff 90       	pop	r15
 a30:	ef 90       	pop	r14
 a32:	df 90       	pop	r13
 a34:	cf 90       	pop	r12
 a36:	08 95       	ret

00000a38 <Timer0_Ovf_CALLBACK>:

	static void (*Callbackptr10) (void) = 0;
	
	void Timer0_Ovf_CALLBACK (void (*copyFuncptr) (void))
	{
		Callbackptr10 = copyFuncptr;
 a38:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <Callbackptr10+0x1>
 a3c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Callbackptr10>
 a40:	08 95       	ret

00000a42 <__vector_11>:
	}
ISR (TIMER0_OVF)
{
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
	if(Callbackptr10 == 0)
 a64:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Callbackptr10>
 a68:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Callbackptr10+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_11+0x30>
	{
		
	}
	else
	{
		Callbackptr10();
 a70:	09 95       	icall
	}
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <__divsf3>:
 a94:	0e 94 5e 05 	call	0xabc	; 0xabc <__divsf3x>
 a98:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
 a9c:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
 aa0:	58 f0       	brcs	.+22     	; 0xab8 <__divsf3+0x24>
 aa2:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
 aa6:	40 f0       	brcs	.+16     	; 0xab8 <__divsf3+0x24>
 aa8:	29 f4       	brne	.+10     	; 0xab4 <__divsf3+0x20>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	29 f0       	breq	.+10     	; 0xab8 <__divsf3+0x24>
 aae:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 ab2:	51 11       	cpse	r21, r1
 ab4:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 ab8:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>

00000abc <__divsf3x>:
 abc:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
 ac0:	68 f3       	brcs	.-38     	; 0xa9c <__divsf3+0x8>

00000ac2 <__divsf3_pse>:
 ac2:	99 23       	and	r25, r25
 ac4:	b1 f3       	breq	.-20     	; 0xab2 <__divsf3+0x1e>
 ac6:	55 23       	and	r21, r21
 ac8:	91 f3       	breq	.-28     	; 0xaae <__divsf3+0x1a>
 aca:	95 1b       	sub	r25, r21
 acc:	55 0b       	sbc	r21, r21
 ace:	bb 27       	eor	r27, r27
 ad0:	aa 27       	eor	r26, r26
 ad2:	62 17       	cp	r22, r18
 ad4:	73 07       	cpc	r23, r19
 ad6:	84 07       	cpc	r24, r20
 ad8:	38 f0       	brcs	.+14     	; 0xae8 <__divsf3_pse+0x26>
 ada:	9f 5f       	subi	r25, 0xFF	; 255
 adc:	5f 4f       	sbci	r21, 0xFF	; 255
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	44 1f       	adc	r20, r20
 ae4:	aa 1f       	adc	r26, r26
 ae6:	a9 f3       	breq	.-22     	; 0xad2 <__divsf3_pse+0x10>
 ae8:	35 d0       	rcall	.+106    	; 0xb54 <__divsf3_pse+0x92>
 aea:	0e 2e       	mov	r0, r30
 aec:	3a f0       	brmi	.+14     	; 0xafc <__divsf3_pse+0x3a>
 aee:	e0 e8       	ldi	r30, 0x80	; 128
 af0:	32 d0       	rcall	.+100    	; 0xb56 <__divsf3_pse+0x94>
 af2:	91 50       	subi	r25, 0x01	; 1
 af4:	50 40       	sbci	r21, 0x00	; 0
 af6:	e6 95       	lsr	r30
 af8:	00 1c       	adc	r0, r0
 afa:	ca f7       	brpl	.-14     	; 0xaee <__divsf3_pse+0x2c>
 afc:	2b d0       	rcall	.+86     	; 0xb54 <__divsf3_pse+0x92>
 afe:	fe 2f       	mov	r31, r30
 b00:	29 d0       	rcall	.+82     	; 0xb54 <__divsf3_pse+0x92>
 b02:	66 0f       	add	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	bb 1f       	adc	r27, r27
 b0a:	26 17       	cp	r18, r22
 b0c:	37 07       	cpc	r19, r23
 b0e:	48 07       	cpc	r20, r24
 b10:	ab 07       	cpc	r26, r27
 b12:	b0 e8       	ldi	r27, 0x80	; 128
 b14:	09 f0       	breq	.+2      	; 0xb18 <__divsf3_pse+0x56>
 b16:	bb 0b       	sbc	r27, r27
 b18:	80 2d       	mov	r24, r0
 b1a:	bf 01       	movw	r22, r30
 b1c:	ff 27       	eor	r31, r31
 b1e:	93 58       	subi	r25, 0x83	; 131
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	3a f0       	brmi	.+14     	; 0xb32 <__divsf3_pse+0x70>
 b24:	9e 3f       	cpi	r25, 0xFE	; 254
 b26:	51 05       	cpc	r21, r1
 b28:	78 f0       	brcs	.+30     	; 0xb48 <__divsf3_pse+0x86>
 b2a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 b2e:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	e4 f3       	brlt	.-8      	; 0xb2e <__divsf3_pse+0x6c>
 b36:	98 3e       	cpi	r25, 0xE8	; 232
 b38:	d4 f3       	brlt	.-12     	; 0xb2e <__divsf3_pse+0x6c>
 b3a:	86 95       	lsr	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	b7 95       	ror	r27
 b42:	f7 95       	ror	r31
 b44:	9f 5f       	subi	r25, 0xFF	; 255
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__divsf3_pse+0x78>
 b48:	88 0f       	add	r24, r24
 b4a:	91 1d       	adc	r25, r1
 b4c:	96 95       	lsr	r25
 b4e:	87 95       	ror	r24
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret
 b54:	e1 e0       	ldi	r30, 0x01	; 1
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	bb 1f       	adc	r27, r27
 b5e:	62 17       	cp	r22, r18
 b60:	73 07       	cpc	r23, r19
 b62:	84 07       	cpc	r24, r20
 b64:	ba 07       	cpc	r27, r26
 b66:	20 f0       	brcs	.+8      	; 0xb70 <__divsf3_pse+0xae>
 b68:	62 1b       	sub	r22, r18
 b6a:	73 0b       	sbc	r23, r19
 b6c:	84 0b       	sbc	r24, r20
 b6e:	ba 0b       	sbc	r27, r26
 b70:	ee 1f       	adc	r30, r30
 b72:	88 f7       	brcc	.-30     	; 0xb56 <__divsf3_pse+0x94>
 b74:	e0 95       	com	r30
 b76:	08 95       	ret

00000b78 <__fixunssfsi>:
 b78:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_splitA>
 b7c:	88 f0       	brcs	.+34     	; 0xba0 <__fixunssfsi+0x28>
 b7e:	9f 57       	subi	r25, 0x7F	; 127
 b80:	98 f0       	brcs	.+38     	; 0xba8 <__fixunssfsi+0x30>
 b82:	b9 2f       	mov	r27, r25
 b84:	99 27       	eor	r25, r25
 b86:	b7 51       	subi	r27, 0x17	; 23
 b88:	b0 f0       	brcs	.+44     	; 0xbb6 <__fixunssfsi+0x3e>
 b8a:	e1 f0       	breq	.+56     	; 0xbc4 <__fixunssfsi+0x4c>
 b8c:	66 0f       	add	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	1a f0       	brmi	.+6      	; 0xb9c <__fixunssfsi+0x24>
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__fixunssfsi+0x14>
 b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <__fixunssfsi+0x4c>
 b9c:	b1 30       	cpi	r27, 0x01	; 1
 b9e:	91 f0       	breq	.+36     	; 0xbc4 <__fixunssfsi+0x4c>
 ba0:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_zero>
 ba4:	b1 e0       	ldi	r27, 0x01	; 1
 ba6:	08 95       	ret
 ba8:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_zero>
 bac:	67 2f       	mov	r22, r23
 bae:	78 2f       	mov	r23, r24
 bb0:	88 27       	eor	r24, r24
 bb2:	b8 5f       	subi	r27, 0xF8	; 248
 bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x4c>
 bb6:	b9 3f       	cpi	r27, 0xF9	; 249
 bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x34>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b3 95       	inc	r27
 bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x42>
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x5c>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
 bd6:	e8 94       	clt
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
 bda:	97 fb       	bst	r25, 7
 bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
 bde:	90 95       	com	r25
 be0:	80 95       	com	r24
 be2:	70 95       	com	r23
 be4:	61 95       	neg	r22
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	99 23       	and	r25, r25
 bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
 bf0:	f9 2f       	mov	r31, r25
 bf2:	96 e9       	ldi	r25, 0x96	; 150
 bf4:	bb 27       	eor	r27, r27
 bf6:	93 95       	inc	r25
 bf8:	f6 95       	lsr	r31
 bfa:	87 95       	ror	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b7 95       	ror	r27
 c02:	f1 11       	cpse	r31, r1
 c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
 c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
 c08:	bb 0f       	add	r27, r27
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
 c0c:	60 ff       	sbrs	r22, 0
 c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
 c10:	6f 5f       	subi	r22, 0xFF	; 255
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
 c1a:	88 23       	and	r24, r24
 c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
 c1e:	96 e9       	ldi	r25, 0x96	; 150
 c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
 c22:	77 23       	and	r23, r23
 c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
 c26:	9e e8       	ldi	r25, 0x8E	; 142
 c28:	87 2f       	mov	r24, r23
 c2a:	76 2f       	mov	r23, r22
 c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
 c2e:	66 23       	and	r22, r22
 c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
 c32:	96 e8       	ldi	r25, 0x86	; 134
 c34:	86 2f       	mov	r24, r22
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
 c3c:	9a 95       	dec	r25
 c3e:	66 0f       	add	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
 c46:	88 0f       	add	r24, r24
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__fp_inf>:
 c50:	97 f9       	bld	r25, 7
 c52:	9f 67       	ori	r25, 0x7F	; 127
 c54:	80 e8       	ldi	r24, 0x80	; 128
 c56:	70 e0       	ldi	r23, 0x00	; 0
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	08 95       	ret

00000c5c <__fp_nan>:
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	80 ec       	ldi	r24, 0xC0	; 192
 c60:	08 95       	ret

00000c62 <__fp_pscA>:
 c62:	00 24       	eor	r0, r0
 c64:	0a 94       	dec	r0
 c66:	16 16       	cp	r1, r22
 c68:	17 06       	cpc	r1, r23
 c6a:	18 06       	cpc	r1, r24
 c6c:	09 06       	cpc	r0, r25
 c6e:	08 95       	ret

00000c70 <__fp_pscB>:
 c70:	00 24       	eor	r0, r0
 c72:	0a 94       	dec	r0
 c74:	12 16       	cp	r1, r18
 c76:	13 06       	cpc	r1, r19
 c78:	14 06       	cpc	r1, r20
 c7a:	05 06       	cpc	r0, r21
 c7c:	08 95       	ret

00000c7e <__fp_round>:
 c7e:	09 2e       	mov	r0, r25
 c80:	03 94       	inc	r0
 c82:	00 0c       	add	r0, r0
 c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0xc>
 c86:	88 23       	and	r24, r24
 c88:	52 f0       	brmi	.+20     	; 0xc9e <__fp_round+0x20>
 c8a:	bb 0f       	add	r27, r27
 c8c:	40 f4       	brcc	.+16     	; 0xc9e <__fp_round+0x20>
 c8e:	bf 2b       	or	r27, r31
 c90:	11 f4       	brne	.+4      	; 0xc96 <__fp_round+0x18>
 c92:	60 ff       	sbrs	r22, 0
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <__fp_round+0x20>
 c96:	6f 5f       	subi	r22, 0xFF	; 255
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	08 95       	ret

00000ca0 <__fp_split3>:
 ca0:	57 fd       	sbrc	r21, 7
 ca2:	90 58       	subi	r25, 0x80	; 128
 ca4:	44 0f       	add	r20, r20
 ca6:	55 1f       	adc	r21, r21
 ca8:	59 f0       	breq	.+22     	; 0xcc0 <__fp_splitA+0x10>
 caa:	5f 3f       	cpi	r21, 0xFF	; 255
 cac:	71 f0       	breq	.+28     	; 0xcca <__fp_splitA+0x1a>
 cae:	47 95       	ror	r20

00000cb0 <__fp_splitA>:
 cb0:	88 0f       	add	r24, r24
 cb2:	97 fb       	bst	r25, 7
 cb4:	99 1f       	adc	r25, r25
 cb6:	61 f0       	breq	.+24     	; 0xcd0 <__fp_splitA+0x20>
 cb8:	9f 3f       	cpi	r25, 0xFF	; 255
 cba:	79 f0       	breq	.+30     	; 0xcda <__fp_splitA+0x2a>
 cbc:	87 95       	ror	r24
 cbe:	08 95       	ret
 cc0:	12 16       	cp	r1, r18
 cc2:	13 06       	cpc	r1, r19
 cc4:	14 06       	cpc	r1, r20
 cc6:	55 1f       	adc	r21, r21
 cc8:	f2 cf       	rjmp	.-28     	; 0xcae <__fp_split3+0xe>
 cca:	46 95       	lsr	r20
 ccc:	f1 df       	rcall	.-30     	; 0xcb0 <__fp_splitA>
 cce:	08 c0       	rjmp	.+16     	; 0xce0 <__fp_splitA+0x30>
 cd0:	16 16       	cp	r1, r22
 cd2:	17 06       	cpc	r1, r23
 cd4:	18 06       	cpc	r1, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	f1 cf       	rjmp	.-30     	; 0xcbc <__fp_splitA+0xc>
 cda:	86 95       	lsr	r24
 cdc:	71 05       	cpc	r23, r1
 cde:	61 05       	cpc	r22, r1
 ce0:	08 94       	sec
 ce2:	08 95       	ret

00000ce4 <__fp_zero>:
 ce4:	e8 94       	clt

00000ce6 <__fp_szero>:
 ce6:	bb 27       	eor	r27, r27
 ce8:	66 27       	eor	r22, r22
 cea:	77 27       	eor	r23, r23
 cec:	cb 01       	movw	r24, r22
 cee:	97 f9       	bld	r25, 7
 cf0:	08 95       	ret

00000cf2 <__mulsf3>:
 cf2:	0e 94 8c 06 	call	0xd18	; 0xd18 <__mulsf3x>
 cf6:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_round>
 cfa:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_pscA>
 cfe:	38 f0       	brcs	.+14     	; 0xd0e <__mulsf3+0x1c>
 d00:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscB>
 d04:	20 f0       	brcs	.+8      	; 0xd0e <__mulsf3+0x1c>
 d06:	95 23       	and	r25, r21
 d08:	11 f0       	breq	.+4      	; 0xd0e <__mulsf3+0x1c>
 d0a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 d0e:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_nan>
 d12:	11 24       	eor	r1, r1
 d14:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>

00000d18 <__mulsf3x>:
 d18:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_split3>
 d1c:	70 f3       	brcs	.-36     	; 0xcfa <__mulsf3+0x8>

00000d1e <__mulsf3_pse>:
 d1e:	95 9f       	mul	r25, r21
 d20:	c1 f3       	breq	.-16     	; 0xd12 <__mulsf3+0x20>
 d22:	95 0f       	add	r25, r21
 d24:	50 e0       	ldi	r21, 0x00	; 0
 d26:	55 1f       	adc	r21, r21
 d28:	62 9f       	mul	r22, r18
 d2a:	f0 01       	movw	r30, r0
 d2c:	72 9f       	mul	r23, r18
 d2e:	bb 27       	eor	r27, r27
 d30:	f0 0d       	add	r31, r0
 d32:	b1 1d       	adc	r27, r1
 d34:	63 9f       	mul	r22, r19
 d36:	aa 27       	eor	r26, r26
 d38:	f0 0d       	add	r31, r0
 d3a:	b1 1d       	adc	r27, r1
 d3c:	aa 1f       	adc	r26, r26
 d3e:	64 9f       	mul	r22, r20
 d40:	66 27       	eor	r22, r22
 d42:	b0 0d       	add	r27, r0
 d44:	a1 1d       	adc	r26, r1
 d46:	66 1f       	adc	r22, r22
 d48:	82 9f       	mul	r24, r18
 d4a:	22 27       	eor	r18, r18
 d4c:	b0 0d       	add	r27, r0
 d4e:	a1 1d       	adc	r26, r1
 d50:	62 1f       	adc	r22, r18
 d52:	73 9f       	mul	r23, r19
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	62 1f       	adc	r22, r18
 d5a:	83 9f       	mul	r24, r19
 d5c:	a0 0d       	add	r26, r0
 d5e:	61 1d       	adc	r22, r1
 d60:	22 1f       	adc	r18, r18
 d62:	74 9f       	mul	r23, r20
 d64:	33 27       	eor	r19, r19
 d66:	a0 0d       	add	r26, r0
 d68:	61 1d       	adc	r22, r1
 d6a:	23 1f       	adc	r18, r19
 d6c:	84 9f       	mul	r24, r20
 d6e:	60 0d       	add	r22, r0
 d70:	21 1d       	adc	r18, r1
 d72:	82 2f       	mov	r24, r18
 d74:	76 2f       	mov	r23, r22
 d76:	6a 2f       	mov	r22, r26
 d78:	11 24       	eor	r1, r1
 d7a:	9f 57       	subi	r25, 0x7F	; 127
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	9a f0       	brmi	.+38     	; 0xda6 <__mulsf3_pse+0x88>
 d80:	f1 f0       	breq	.+60     	; 0xdbe <__mulsf3_pse+0xa0>
 d82:	88 23       	and	r24, r24
 d84:	4a f0       	brmi	.+18     	; 0xd98 <__mulsf3_pse+0x7a>
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	bb 1f       	adc	r27, r27
 d8c:	66 1f       	adc	r22, r22
 d8e:	77 1f       	adc	r23, r23
 d90:	88 1f       	adc	r24, r24
 d92:	91 50       	subi	r25, 0x01	; 1
 d94:	50 40       	sbci	r21, 0x00	; 0
 d96:	a9 f7       	brne	.-22     	; 0xd82 <__mulsf3_pse+0x64>
 d98:	9e 3f       	cpi	r25, 0xFE	; 254
 d9a:	51 05       	cpc	r21, r1
 d9c:	80 f0       	brcs	.+32     	; 0xdbe <__mulsf3_pse+0xa0>
 d9e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_inf>
 da2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 da6:	5f 3f       	cpi	r21, 0xFF	; 255
 da8:	e4 f3       	brlt	.-8      	; 0xda2 <__mulsf3_pse+0x84>
 daa:	98 3e       	cpi	r25, 0xE8	; 232
 dac:	d4 f3       	brlt	.-12     	; 0xda2 <__mulsf3_pse+0x84>
 dae:	86 95       	lsr	r24
 db0:	77 95       	ror	r23
 db2:	67 95       	ror	r22
 db4:	b7 95       	ror	r27
 db6:	f7 95       	ror	r31
 db8:	e7 95       	ror	r30
 dba:	9f 5f       	subi	r25, 0xFF	; 255
 dbc:	c1 f7       	brne	.-16     	; 0xdae <__mulsf3_pse+0x90>
 dbe:	fe 2b       	or	r31, r30
 dc0:	88 0f       	add	r24, r24
 dc2:	91 1d       	adc	r25, r1
 dc4:	96 95       	lsr	r25
 dc6:	87 95       	ror	r24
 dc8:	97 f9       	bld	r25, 7
 dca:	08 95       	ret

00000dcc <__udivmodsi4>:
 dcc:	a1 e2       	ldi	r26, 0x21	; 33
 dce:	1a 2e       	mov	r1, r26
 dd0:	aa 1b       	sub	r26, r26
 dd2:	bb 1b       	sub	r27, r27
 dd4:	fd 01       	movw	r30, r26
 dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <__udivmodsi4_ep>

00000dd8 <__udivmodsi4_loop>:
 dd8:	aa 1f       	adc	r26, r26
 dda:	bb 1f       	adc	r27, r27
 ddc:	ee 1f       	adc	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	a2 17       	cp	r26, r18
 de2:	b3 07       	cpc	r27, r19
 de4:	e4 07       	cpc	r30, r20
 de6:	f5 07       	cpc	r31, r21
 de8:	20 f0       	brcs	.+8      	; 0xdf2 <__udivmodsi4_ep>
 dea:	a2 1b       	sub	r26, r18
 dec:	b3 0b       	sbc	r27, r19
 dee:	e4 0b       	sbc	r30, r20
 df0:	f5 0b       	sbc	r31, r21

00000df2 <__udivmodsi4_ep>:
 df2:	66 1f       	adc	r22, r22
 df4:	77 1f       	adc	r23, r23
 df6:	88 1f       	adc	r24, r24
 df8:	99 1f       	adc	r25, r25
 dfa:	1a 94       	dec	r1
 dfc:	69 f7       	brne	.-38     	; 0xdd8 <__udivmodsi4_loop>
 dfe:	60 95       	com	r22
 e00:	70 95       	com	r23
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	bd 01       	movw	r22, r26
 e0c:	cf 01       	movw	r24, r30
 e0e:	08 95       	ret

00000e10 <__tablejump2__>:
 e10:	ee 0f       	add	r30, r30
 e12:	ff 1f       	adc	r31, r31
 e14:	05 90       	lpm	r0, Z+
 e16:	f4 91       	lpm	r31, Z
 e18:	e0 2d       	mov	r30, r0
 e1a:	09 94       	ijmp

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
